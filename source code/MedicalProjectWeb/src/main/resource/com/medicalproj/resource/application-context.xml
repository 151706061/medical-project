<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-2.5.xsd 
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-2.5.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
						http://www.springframework.org/schema/mvc 
        				http://www.springframework.org/schema/mvc/spring-mvc.xsd"> 
	
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:/com/medicalproj/resource/jdbc-config.properties" />
	</bean>

     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
          <property name="user" value="${APP.Username}"/>
          <property name="password" value="${APP.Password}"/>
          <property name="driverClass" value="${APP.Driver}"/>
          <property name="jdbcUrl" value="${APP.URL}"/>

           <!--连接池中保留的最大连接数。默认值: 15 --> 
          <property name="maxPoolSize" value="20"/>
          <!-- 连接池中保留的最小连接数，默认为：3-->
          <property name="minPoolSize" value="2"/>
          <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
          <property name="initialPoolSize" value="2"/>

          <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 --> 
          <property name="maxIdleTime" value="60"></property>
          <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 --> 
          <property name="checkoutTimeout" value="3000"/>
          <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 --> 
          <property name="acquireIncrement" value="2"/>
         <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次--> 
          <property name="acquireRetryAttempts" value="0"/>
          <!--重新尝试的时间间隔，默认为：1000毫秒--> 
          <property name="acquireRetryDelay" value="1000" />
          <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 --> 
          <property name="autoCommitOnClose" value="false"></property>
          <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false--> 
          <property name="breakAfterAcquireFailure" value="false"></property>

          <property name="preferredTestQuery" value="SELECT 1"></property>
          <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 --> 
          <property name="idleConnectionTestPeriod" value="18000"></property>
          <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0--> 
          <property name="maxStatements" value="100"></property>
          <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 --> 
          <!-- <property name="maxStatementsPerConnection"></property> -->
     </bean>
	
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">	
		<property name="driverClassName"><value>${APP.Driver}</value></property>
		<property name="url" ><value>${APP.URL}</value></property>
		<property name="username" ><value>${APP.Username}</value></property>
		<property name="password" ><value>${APP.Password}</value></property>		
		<property name="initialSize" value="10" />
		<property name="maxIdle" value="50" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="50" />
		<property name="logAbandoned" value="true" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="180" />
		<property name="maxWait" value="1000" />
		<property name="validationQuery"><value>select 1 from dbo.SYS_User</value></property>
		<property name="testOnBorrow"><value>true</value></property>
	</bean> -->
	
	<!-- MyBatis sqlSessionFactory 配置 mybatis --> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->  
        <property name="mapperLocations" value="classpath:com/medicalproj/**/dao/mapper/*.xml" />  
    </bean>  
    
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.medicalproj.common.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>
    
    <!-- 事务相关控制 -->
    <bean id="transactionManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
        <property name="dataSource" ref="dataSource" /> 
    </bean> 
    <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
        <tx:attributes> 
            <tx:method name="*" propagation="REQUIRED" read-only="false" 
                rollback-for="java.lang.Exception"/> 
        </tx:attributes> 
    </tx:advice> 
    <aop:config> 
        <aop:pointcut id="pc" 
            expression="execution(* com.medicalproj.*.service.*.*(..))" /> 
        <!-- 把事务控制在Business层 -->
        <aop:advisor pointcut-ref="pc" advice-ref="txAdvice" /> 
    </aop:config> 
    
    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="loginRealm" class="com.medicalproj.common.realm.LoginRealm">
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="loginRealm"/>
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/modules/web/login.jsp"/>
	    <!-- override these for application-specific URLs if you like:
	    
	    <property name="successUrl" value="/home.jsp"/>
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property> -->
	    <property name="filterChainDefinitions">
	        <value>
	            # some example chain definitions:
	            #/admin/** = authc, roles[admin]
	            #/docs/** = authc, perms[document:read]
	            #/** = authc
	            # more URL-to-FilterChain definitions here

				/admin/login/** = anon
				/admin/auth/login.do = anon
				/admin/assets/** = anon
				/web/dcmviewer/** = anon	            
	            /modules/cornerstone/** = anon
	            /modules/web/login.jsp = anon
	            /modules/web/register.jsp = anon
	            /modules/web/assets/** = anon
	            /web/auth/** = anon
	            /** = authc
	        </value>
	    </property>
	</bean>

    <!-- <mvc:interceptors>  
        <mvc:interceptor>  
            <mvc:mapping path="/**/*.do"/>  
            <bean class="com.haijianzhi.common.interceptor.LoginInterceptor"></bean>  
        </mvc:interceptor>  
    </mvc:interceptors>  --> 
</beans>